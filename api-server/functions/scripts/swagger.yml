openapi: 3.0.3
info:
  title: RMAC Server API
  description: |-
    RMAC Server API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: http://localhost:5001/rms-one/us-central1/api
tags:
  - name: register
    description: Register or verify registration of a host
  - name: command
    description: Fetch pending commands or push commands to be executed on host
  - name: update
    description: Fetch new RMAC Client update
paths:
  /register:
    get:
      tags:
        - register
      summary: Register or verify registration of a host
      operationId: register
      parameters:
        - name: clientName
          in: query
          description: Name of the client against which registration is to be performed
          required: true
          schema:
            type: string
        - name: hostName
          in: query
          description: Name of the host against which registration is to be performed
          required: true
          schema:
            type: string
        - name: id
          in: query
          description: ID of the client against which registration is to be verified and re-registration is to be done when ID doesn't exist
          required: false
          schema:
            type: string
      responses:
        "201":
          description: Successful registration when ID is not provided or provided ID doesn't exist
          content:
            text/plain:
              example: "Ft66_f4GergT4GgeRE"
        "200":
          description: Successful verification when provided ID is already registered
          content:
            text/plain:
              example: "Ft66_f4GergT4GgeRE"
        "400":
          description: Client name or host name not provided
          content:
            application/json:
              example:
                {
                  code: 2,
                  status: 400,
                  message: "ClientName and HostName must be provided",
                }
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/E_SERVER_ERROR"
  /command:
    get:
      tags:
        - command
      summary: Fetch pending commands to be executed on host
      operationId: get-command
      parameters:
        - name: id
          in: query
          description: ID of the client
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              example: ["testcommand1", "testcommand2", "testcommand3"]
        "400":
          description: Client ID not provided
          content:
            application/json:
              example:
                { code: 3, status: 400, message: "ClientId must be provided" }
        "404":
          description: Provieded client id doesn't exist
          content:
            application/json:
              example: { code: 4, status: 404, message: "ClientId not found" }
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/E_SERVER_ERROR"
    post:
      tags:
        - command
      summary: Push commands to be executed on a specific host
      operationId: post-command
      parameters:
        - name: id
          in: query
          description: ID of the client
          required: true
          schema:
            type: string
      requestBody:
        required: true
        description: Successful operation
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
              example: ["testcommand1", "testcommand2", "testcommand3"]
      responses:
        "200":
          description: Successful operation
          content:
            text/plain:
              example: "Commands updated"
        "400":
          description: Client ID not provided
          content:
            application/json:
              examples:
                CLIENT_ID_NOT_PROVIDED:
                  value:
                    {
                      code: 3,
                      status: 400,
                      message: "ClientId must be provided",
                    }
                BAD_COMMANDS_FORMAT:
                  value:
                    {
                      code: 5,
                      status: 400,
                      message: "Bad commands format, must be an array of commands",
                    }
        "404":
          description: Provieded client id doesn't exist
          content:
            application/json:
              example: { code: 4, status: 404, message: "ClientId not found" }
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/E_SERVER_ERROR"
  /update:
    get:
      tags:
        - update
      summary: Fetch new RMAC Client update
      operationId: update
      parameters:
        - name: version
          in: query
          description: Current version of RMAC client used by the host
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              examples:
                NEW_UPDATE:
                  value: ["https://download.url?sas_token=1a2bc3", "checksum"]
                  description: Short-lived (30 mins) download link to the new RMAC Client executable and its SHA-256 checksum
                NO_UPDATE:
                  value: []
        "400":
          description: Current version used is not provided
          content:
            application/json:
              example:
                {
                  code: 6,
                  status: 400,
                  message: "Currently used version must be provided",
                }
        "500":
          description: Server error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/E_SERVER_ERROR"
components:
  schemas:
    E_SERVER_ERROR:
      type: object
      properties:
        code:
          type: integer
          example: 1
        message:
          type: string
          example: "Something went wrong"
        status:
          type: integer
          example: 500
