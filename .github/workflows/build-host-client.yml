name: Build host-client

on:
  push:
    branches: [main]
    paths:
      - "host-client/**"
  workflow_dispatch:

defaults:
  run:
    working-directory: ./host-client

jobs:
  Versioning:
    runs-on: windows-latest
    outputs:
      version: "v${{ steps.get-version.outputs.info }}"

    steps:
      - uses: actions/checkout@v3

      - name: Get Version
        id: get-version
        uses: mavrosxristoforos/get-xml-info@1.1.1
        with:
          xml-file: "host-client/pom.xml"
          xpath: '//*[local-name()="rmac.version"]'

      - uses: mukunku/tag-exists-action@v1.2.0
        id: tagExists
        with:
          tag: "v${{ steps.get-version.outputs.info }}"

      - name: Check Tag
        run: |
          IF ${{ steps.tagExists.outputs.exists }} EQU true echo "Tag already exists" && exit 1
        shell: cmd

  Build:
    needs: [Versioning]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Build with Maven
        run: mvn --batch-mode --update-snapshots -DskipTests=true clean install

  Test:
    needs: [Versioning]
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Test with Maven
        run: mvn test

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
          flags: host-client

  Quality:
    needs: [Build, Test]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "temurin"

      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify "-Dsonar.projectKey=saurabh-prosoft_rmac" org.sonarsource.scanner.maven:sonar-maven-plugin:sonar

      - name: Upload artifacts
        uses: actions/upload-artifact@v3.1.2
        with:
          name: host-client
          path: |
            host-client/target/RMACClient.jar
            host-client/target/RMACUpdater.jar

  Release:
    needs: [Versioning, Quality]
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3

      - name: Download Runtime
        run: |
          mkdir auto-installer
          cd auto-installer
          $ProgressPreference = 'SilentlyContinue'
          Invoke-WebRequest "https://dl.dropboxusercontent.com/s/oekklz5gw3uwc09/rmac-runtime-1.0.zip?dl=0" -OutFile runtime.zip
          7z x runtime.zip
          rm runtime.zip
        shell: powershell

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: host-client
          path: host-client/auto-installer/bin

      - name: Build AutoInstaller
        run: |
          cd auto-installer
          7z a auto-installer.7z bin\ runtime\ setup.bat setup.vbs start.vbs
          copy /b 7zSD.sfx + config.txt + auto-installer.7z auto-installer.exe
        shell: cmd

      - uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: "host-client/auto-installer/auto-installer.exe,host-client/auto-installer/bin/RMACClient.jar,host-client/auto-installer/bin/RMACUpdater.jar"
          commit: "main"
          tag: "v${{ needs.Versioning.outputs.version }}"
          makeLatest: "latest"
          generateReleaseNotes: true

  Cleanup:
    needs: [Release]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Delete artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          name: host-client
